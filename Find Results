Searching 8 files for "base =" (regex, case sensitive)

/Users/westerhack/code/python/Omega/group.py:
    1  class group(list):
    2:     def __new__(self, base = '', args = [], parens = ('','')):
    3          return super().__new__(self, args)
    4  
    5:     def __init__(self, base = '', args = [], parens = ('','')):
    6          import control
    7          import omobj
    8:         self.base = base if isinstance(base,omobj.omobj) else omobj.omobj(base)
    9          super().__init__(args)
   10          self.parens = parens
   ..
   28          ret = 'group('
   29          if self.base:
   30:             ret += 'base = ' + repr(self.base) + ', '
   31          if self:
   32              ret += 'args = ' + super().__repr__() + ', '

/Users/westerhack/code/python/Omega/omfile.py:
  104                  ele = linegrp.pop(0) #pop(0) is inefficient for list. update this in the future
  105                  if str(ele) not in control.allparens:
  106:                     ret.append(group(base = ele))
  107                  else:
  108                      toappend = group()
  ...
  154              if __debug__:
  155                  assert isinstance(line[fhp], group), 'expected a group for fhp! (not %s)' % line[fhp]
  156:             ret = group(base = line[fhp].base, parens = line.parens)
  157              current = group()
  158              while line:
  159                  e = line.pop(0) #was formerly .pop(0)
  160                  print(e,type(e),ret,type(ret),e.base,type(e.base), ret.base, type(ret.base))
  161:                 if e.base == ret.base:
  162                      if current:
  163                          ret.append(fixtkns(current))

/Users/westerhack/code/python/Omega/omobj.py:
    3          if __debug__:
    4              assert not isinstance(base, omobj), base
    5:         # self.base =  base.base if isinstance(base, omobj) else omobj._getbase(base)
    6:         self.base = omobj._getbase(base)
    7          self.evalfunc = evalfunc
    8          print('initialized:',self)
    .
   44              assert hasattr(other, 'base'), "{} :: {}".format(repr(other), type(other))
   45              assert hasattr(other, 'evalfunc'), "{} :: {}".format(repr(other), type(other))
   46:         return self.base == other.base and self.evalfunc == other.evalfunc
   47  
   48      def eval(self, eles, locls):
   ..
   92                      ele.eval(locls)
   93                      ret.append(locls['$'])
   94:                 locls['$'] = group(base = ret)# x = y
   95                  return
   96              else:

11 matches across 3 files
