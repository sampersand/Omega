->$dnd
#func:disparr:(arr,):{
    for:(0->q;q<[arr:len];q+<):{
        disp:(arr:get:q,)::', '
    };
    disp:
}
(1,9,47,38)->a
disparr:(a,)
disparr:(a,)
disparr:(a,)
disparr:(a,)
@eof
1->p
disp:(a:get:p,'@')
disp:(if:(a:get:p > a:get:(p + 1)):'p>p+1':'p<p+1',)
disp:a
@eof
#
func:genrand:(size, max):{
    return:{98,57}
    , -> ret
    for:(0 -> q; q < size; q+<):{
        ret:add:{(max * om:rand):round}
    }
    return:ret
}
func:disparr:(a,):{
    for:(0->p;p<[a:len];p+<):{disp:(a:get:p,)::', '};disp:
    }
func:sort:(oa,):{
    -1->p
    a<-oa:copy:()
    whilst:(a:len>{>+p + 1}):{
        disp:(a:get:p,'<--')
        a:get:p->temp
        a:get:(p+1)->ele;
        if:(temp > ele):{ 
        #if:((a:get:p->temp;) < a:get:(p + 1)):{# 
            a:set:(p, ele) 
            a:set:(p + 1, temp) 
        } 
    }
    return:a
}
genrand:(5, 10F) -> rnd
disparr:(rnd,)
sortd <- sort:(rnd, )
disparr:(sortd,)
abort:rnd
$dnd<-1