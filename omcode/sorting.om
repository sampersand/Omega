func:genarr:(size):{
    (,) -> arr
    whilst:(arr:len < size):{
        arr:push:((om:rand * 100):round)
    }
    return:arr
}

func:bubblesort:(arr):{
    arr <- arr:$clone
    for:(0 -> i, i + 1 < arr:len, i<-i+1):{
        l <- arr:get:(i)
        r <- arr:get:(i+1)
        if:(l > r):{
            arr:set:(i, r)
            arr:set:(i + 1,l)
            i <- 0-1
        }
    }
    return:arr
}
disp:(bubblesort:(genarr:(10)))
# 4/22 I dont really want to figure out how the following code works,
# so i just commented it out.
# func:qsort:(uns,):{
#     return:{
#         if:[uns:len <= 1]:uns:{
#             piv <- {uns <- uns:copy}:pop:0
#             , -> ret;
#             $:copy -> low;
#             $:copy-> upp
#             for:(i <- 0; i < uns:len; i <+- 1):{
#                 (if:(uns:get:i -> e; $ < piv):upp:low):add:[e:copy,]
#             }
#             ret:addall:(qsort:[upp,], [piv,],qsort:[low,])
#             ret
#         }
#     }
# }
# func:main:(a):{
#     uns <- genarr:(30,)
#     srt <- qsort:(uns:copy, )
#     disp:('uns : ', uns, '\n', 'srt : ', srt):''
# }
# main: 
1 ->  $dnd