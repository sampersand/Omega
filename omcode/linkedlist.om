->$dnd
disp:(1,\
      2)
@eof
class:_node:():{
    func:$init:(data, next):{
        $this:$sa:('data', data)
        $this:$sa:('next', next)
        return:$this
    }
}
# n <- _node:$init:('this is a data', nil)
# disp:(n:$attrs, n:$ga:('data'), n:$ga:('next')):'\t\t|\t'
class:Stack:():{
    func:$init:():{
        $this:$sa:('head', nil)
        return:$this
    }
    func:push:(n):{
        disp:($this:$ga:('head'))
        $this:$sa:('head', _node:$init:(n, $this:$ga:('head')))
    }
    # func:add:(data):{
    #     $this:$sa:('head', _node:$init:(data, $this:$ga:('head')))
    #     disp:($this:$attrs)#, $this:$ga:('head'))
    # }
    func:$str:():{
        ret <- '['
        next <- $this:$ga:('head')
        whilst:(next <> nil):{
            ret <- ret + next:$ga:('data') + ', '
            next <- next:$ga:('next')
        }
        return:(ret + ']')
    }
}
stack <- Stack:$init:()
stack:push:(1.9)
disp:(stack:$str:())