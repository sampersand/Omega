->$dnd
func:f:(data):{
    disp:(data,'data')
}
f:(1)
@eof
class:_node:():{
    func:$init:(data, next):{
        $this:$sa:('data', data)
        $this:$sa:('next', next)
        return:$this
    }
}
class:stack:():{
    func:$init:():{
        $this:$sa:('head', nil)
        return:$this
    }
    func:add:(data):{
        $this:$sa:('head', _node:$init:(data, $this:$ga:('head')))
        disp:($this:$attrs)#, $this:$ga:('head'))
    }
    func:$str:():{
        ret <- '['
        next <- $this:$ga:('head')
        whilst:(next <> nil):{
            ret <- ret + next:$ga:('data') + ', '
            next <- next:$ga:('next')
        }
        return:(ret + ']')
    }
}
stck <- stack:$init:()
stck:add:('tis is a node')
disp:(stck:$str:(), stck:$ga:(head))
1 -> $dnd